AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍
	관점이란 개발에 있어서, 관심사(Concern)를 의미한다.
	코드의 중복을 줄일 수 있으며, 핵심로직과 주변로직을 분리하여 관리할 수 있다.
	부수적인 로직은 아래와 같다.

	- 파라미터가 잘 전달 되었는가?
	- 이 로직에서 발생할 수 있는 예외를 어떻게 처리할 것인가?
	- 적절한 권한을 가진 사용자가 작업하고 있는가?

	즉, 반복적으로 나타나는 횡단관심사를 모듈로 분리한 후 적절한 곳에
	로직을 주입하는 것이 AOP이다. 스프링에서는 별도의 복잡한 설정 없이
	간편하게 AOP의 기능들을 구현할 수 있기 때문에 중요한 특징 중 하나이다.

AOP를 사용할 수 있을 때
	
	- Around(전구역)
	- Before(메소드 시작 직후)
	- After(메소드 종료 직전)
	- AfterReturning(메소드 리턴 후) - 리턴값 추출 가능
	- AfterThrowing(메소드 예외 발생 후) - 예외 객체 추출 가능, 특정 예외가 발생했을 때 구현할 주변 로직 분리

AOP 설계 순서
	1. 구현할 횡단 관심사를 의미할 수 있는 어노테이션 만들기
	2. 어노테이션을 Aspect로 등록하기
	3. 종단 관심사에 등록된 어노테이션 사용하기








